@page "/feed"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using Zwitscher.Models
@inject NavigationManager NavigationManager
@inject ChatService ChatService
@inject UserService UserService
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

<div class="feed-container">
    <!-- Nachrichten-Liste (scrollbar nur hier) -->
    <div class="feed-messages">
        @if (messages.Count == 0)
        {
            <p class="empty">Noch keine Nachrichten.</p>
        }
        else
        {
            @foreach (var msg in messages)
            {
                <div class="message">
                    <span class="message-user">@msg.User?.UserName</span>
                    <span class="message-text">@msg.Text</span>
                    <span class="message-time">@msg.CreatedAt.ToLocalTime():HH:mm</span>
                </div>
            }
        }
    </div>

    <!-- Eingabe-Box -->
    <div class="feed-input">
        <textarea class="input-textarea"
                  @bind="newMessage"
                  placeholder="Schreibe eine Nachricht..."
                  @onkeypress="HandleKeyPress"></textarea>
        <button class="send-button" @onclick="Send">Senden</button>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string newMessage = "";
    private HubConnection? hubConnection;
    private User? currentUser;
    private string? connectionId;

    protected override async Task OnInitializedAsync()
    {
        // Redirect, falls nicht eingeloggt
        if (!await UserService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        currentUser = await UserService.GetUserAsync();
        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // letzte Nachrichten laden
        messages = (await ChatService.GetLatestMessagesAsync()).ToList();

        // SignalR-Verbindung aufbauen
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        // Callback für eingehende Nachrichten
        hubConnection.On<string, string, DateTime>(
            "ReceiveMessage",
            (userName, text, createdAt) =>
            {
                var msg = new ChatMessage
                    {
                        User = new User { UserName = userName },
                        Text = text,
                        CreatedAt = createdAt
                    };
                messages.Add(msg);
                InvokeAsync(StateHasChanged);
                _ = JsRuntime.InvokeVoidAsync("scrollFeedToBottom");
            });

        await hubConnection.StartAsync();

        connectionId = hubConnection.ConnectionId;

        // initial scroll to bottom
        await Task.Delay(50);
        await JsRuntime.InvokeVoidAsync("scrollFeedToBottom");
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || currentUser == null)
            return;

        // Nachricht in DB und per ChatService (broadcast inkl.) speichern
        var msg = await ChatService.SendMessageAsync(currentUser.Id, newMessage.Trim(), connectionId);
        messages.Add(msg);
        newMessage = "";

        await JsRuntime.InvokeVoidAsync("scrollFeedToBottom");
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await Send();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
